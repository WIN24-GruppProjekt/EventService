// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#8B5CF6",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mindful movement and stretching",
                            Icon = "fa-leaf",
                            IsActive = true,
                            Name = "Yoga",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High-intensity functional fitness",
                            Icon = "fa-dumbbell",
                            IsActive = true,
                            Name = "CrossFit",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Indoor cycling workout",
                            Icon = "fa-bicycle",
                            IsActive = true,
                            Name = "Spinning",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Core strength and flexibility",
                            Icon = "fa-circle",
                            IsActive = true,
                            Name = "Pilates",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableSpots")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSpots = 20,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Start your day with energizing yoga poses and mindful breathing",
                            EndTime = new DateTime(2025, 1, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Studio A",
                            MaxParticipants = 20,
                            StartTime = new DateTime(2025, 1, 15, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Morning Yoga Flow"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSpots = 15,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High-intensity workout of the day - build strength and endurance",
                            EndTime = new DateTime(2025, 1, 15, 19, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Main Gym",
                            MaxParticipants = 15,
                            StartTime = new DateTime(2025, 1, 15, 18, 0, 0, 0, DateTimeKind.Utc),
                            Title = "CrossFit WOD"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSpots = 25,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "45 minutes of intense cycling with motivating music",
                            EndTime = new DateTime(2025, 1, 15, 19, 45, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Spin Room",
                            MaxParticipants = 25,
                            StartTime = new DateTime(2025, 1, 15, 19, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Spin Class"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSpots = 18,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gentle pilates session focusing on core strength and flexibility",
                            EndTime = new DateTime(2025, 1, 16, 18, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Studio B",
                            MaxParticipants = 18,
                            StartTime = new DateTime(2025, 1, 16, 17, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Evening Pilates"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
